# declare our functions at the top
FUNCTION(LOAD_PROFILE PLATFORM)
	MESSAGE(STATUS "Loading platform ${platform}")

	MESSAGE(STATUS "Finding all platform specific sources")
	FILE(GLOB_RECURSE PLATFORM_SRCS "arch/${PLATFORM}/**/*.c" "arch/${PLATFORM}/**/*.s")
	MESSAGE(STATUS ${PLATFORM_SRCS})
	MESSAGE(STATUS "Including platform specific flags")
	INCLUDE("arch/${PLATFORM}/flags.cmake")
  	SET(PLATFORM_SRCS ${PLATFORM_SRCS} PARENT_SCOPE)
  	SET(PLATFORM_LAYOUT "${ISA}/${PLATFORM}/layout.ld" PARENT_SCOPE)
  	SET(PLATFORM_C_FLAGS {PLATFORM_C_FLAGS} PARENT_SCOPE)
  	SET(PLATFORM_ASM_FLAGS ${PLATFORM_ASM_FLAGS} PARENT_SCOPE)
ENDFUNCTION(LOAD_PROFILE)

FUNCTION(REMOVE_FILES_WITH_PATTERN FILE_LIST FILE_PATTERN VAR_NAME)
	foreach (FILE ${FILE_LIST})
    	if ("${FILE}" MATCHES "(.*)${FILE_PATTERN}(.*)")
    		list (REMOVE_ITEM FILE_LIST ${FILE})
    	endif ("${FILE}" MATCHES "(.*)${FILE_PATTERN}(.*)")
	endforeach(FILE ${FILE_LIST})
	SET(${VAR_NAME} ${FILE_LIST} PARENT_SCOPE)
ENDFUNCTION(REMOVE_FILES_WITH_PATTERN)

CMAKE_MINIMUM_REQUIRED(VERSION 3.0.0)

# enable at&t assembly support
ENABLE_LANGUAGE(ASM-ATT)

#set c fkags
#CMAKE_C_FLAGS

#setting assembly build options
#CMAKE_ASM-ATT_COMPILE_OBJECT

#setting linker flags
#SET_TARGET_FLAGS(target PROPERTIES LINK_FLAGS "flags")

# C flags export CFLAGS='-O2 -g'
# CPP flags export CPPFLAGS=''


 
SET(CMAKE_ASM-ATT_COMPILE_OBJECT 
  "<CMAKE_ASM-ATT_COMPILER> ${ISA_ASM_FLAGS} ${PLATFORM_ASM_FLAGS} -o <OBJECT> <SOURCE>")
SET(CMAKE_C_FLAGS "${ISA_C_FLAGS} ${PLATFORM_C_FLAGS}")
SET_TARGET_PROPERTIES(kernel PROPERTIES LINK_FLAGS 
  "-T ${PLATFORM_LAYOUT} -N ${ISA_LINKER_FLAGS} ${PLATFORM_LINKER_FLAGS}")

# build libc first - kernel depends on it
ADD_SUBDIRECTORY(libc)

# now build the kernel
ADD_SUBDIRECTORY(kernel)
