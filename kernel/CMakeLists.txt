
MESSAGE(STATUS "Building kernel")

# here we set flags specific for the kernel
set(KERNEL_C_FLAGS "-ffreestanding -fbuiltin -Wall -Wextra")
set(KERNEL_CPP_FLAGS "-D__is_myos_kernel -Iinclude")
set(KERNEL_LD_FLAGS "")
set(KERNEL_LIBS "-nostdlib -lk -gcc")

LOAD_PROFILE("i386")
MESSAGE(STATUS "Finding boot/crti.s")
FILE(GLOB_RECURSE CRTI_SRC "**/crti.s")
MESSAGE(STATUS "${CRTI_SRC}")

MESSAGE(STATUS "Finding boot/crtn.s")
FILE(GLOB_RECURSE CRTN_SRC "**/crtn.s")
MESSAGE(STATUS "${CRTN_SRC}")

MESSAGE(STATUS "Removing crti.s and crtn.s from platform sources")
list (REMOVE_ITEM PLATFORM_SRCS ${CRTI_SRC})
list (REMOVE_ITEM PLATFORM_SRCS ${CRTN_SRC})

MESSAGE(STATUS "Finding all generic sources")
FILE(GLOB_RECURSE GENERIC_SRCS "**/*.c" "**/*.s")
REMOVE_FILES_WITH_PATTERN("${GENERIC_SRCS}" "arch" "GENERIC_SRCS")
MESSAGE(STATUS ${GENERIC_SRCS})


ADD_EXECUTABLE(kernel ${CRTI_SRC} ${PLATFORM_SRCS} ${GENERIC_SRCS} ${CRTN_SRC})

#SET(CMAKE_ASM-ATT_COMPILE_OBJECT "<CMAKE_ASM-ATT_COMPILER> -o <OBJECT> <SOURCE>")
#SET(CMAKE_C_FLAGS "${GENERAL_C_FLAGS} ${KERNEL_C_FLAGS} ${PLATFORM_C_FLAGS}")
#SET_TARGET_PROPERTIES(kernel PROPERTIES LINK_FLAGS "-T ${PLATFORM_LAYOUT} -N ${GENERAL_LINKER_FLAGS} ${KERNEL_LINKER_FLAGS} ${PLATFORM_LINKER_FLAGS}")